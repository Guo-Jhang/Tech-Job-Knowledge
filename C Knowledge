==============================
Stack and Heap

High address---------------
            |             |
            |             |
            ---------------
            |    Stack    |
            ---------------
            |      |      | 
            |      V      |
            |             |
            |             |
            |      ^      |
            |      |      |
            ---------------
            |     Heap    |
            ---------------
            |             |  <-uniitialized data (bss)  |initialized to 
            |             |                             |zero by exec
            ---------------
            |             | <-initialized Data          |read from program file
            |             |                             |by exec
            ---------------
            |    text     |
Low address ---------------


[Text Segment]
1.	Code Segment，包含程式碼以及可以執行的指令
2.	放在Memory中low level address的位置，避免被stack/heap overwrite
3.	此區塊通常是shareable，比如說同時存在相同的Process時，只會共用一份text
4.	Read-only，避免程式自己修改自己的Instruction

[Initialized Data Segment]
1.	包含由Programmer自己定義的Global Variable/Static Variable
2.	可以再細分為Read-Only和Read-Write Segment
(Global) int a = 1; //Read-Write
const int a = 1; //Read-Only

[Uninitialized Data Segment]
1.	A.K.A BSS segment
2.	包含所有宣告為global/static的變數中，沒有任何初始值，或是初始值為0的變數
static int i; //BSS segment
static int j = 0; //BSS segment


[Stack] (由上往下)
1.	存放"Automatic Variables"，比方說function內的local variable
2.	記錄function的堆疊狀況，比如caller的address，讓function結束後可以順利return。
    每個function都有自己的堆疊空間，不同function的變數不會互相干擾

[Heap] (由下往上)
1.	可配置的動態記憶體空間，通常使用malloc/realloc/free函式
    p1 = (char *)malloc(10);
    根據以上的程式碼，會在Heap分配一塊10byte的空間。
    但是p1仍然是在Stack中，存放剛剛分配出來的空間的位置。
2.	當Heap跟Stack的pointer collision，就會 Out Of Memory
3.	All threads share a common Heap.每個thread都有自己的stack，但是Heap是共用的

////////////////////////////////////
解釋stack與heap
Stack:
區域變數、函式的參數與函式的位址等等，由系統管理，必須在編譯時期為已知。
這些變數的回收會發生在它從堆疊pop出去的時候，因為個數、大小什麼的都是已知，所以系統知道怎麼進行配置與回收。

Heap: 
這裡的記憶體由使用者負責進行回收，配置則是由malloc或是new來負責。
使用這裡的記憶體主要是用在編譯時期還不知道大小或個數的變數。

例如說，
你需要用一個陣列，這個陣列的大小要在執行的時候由使用者的輸入來決定，
那你就只能使用動態配置，也就是把這個陣列配置在heap中。


==============================================================
Macros

巨集　(macro)
優點：執行速度快，沒有堆疊的 push 和 pop 動作的需要，減少時間的耗損。
缺點：巨集被呼叫多次以後，會耗損存放及使用大量的記憶體空間。

#define MIN(a,b) /
        ((a) ^ ((a)^(b) & (a)<(b)-1) )
#define MIN(a,b) /
				(( (a)<(b) )? (a) : (b))

巨集，重點需在每個參數加上括號，否則容易出現預期外計算
會再編譯階段展開Function於Main中，省去跳躍動作，加速運算，但程式碼較大
PS:呼叫Function方式程式編譯後大小較小


Inline Funciton

內嵌函式

於較簡易Function前加上，於Main呼叫時等同於直接將算是展開於MAIN中，省去呼叫Function時所需的跳躍CYCLE
PS:如該Function計算較複雜則不適用
與Macro差異:
	內嵌函式是由編譯器剖析，而巨集則是由前置處理器展開


///////////////////////////////

Macro & Inline function different
macro 跟 inline 用 空間換取時間
function 用時間換取空間

macro 跟 inline 相同處是把呼叫的位址換成函式主體，執行速度較快，多半用於需要多次呼叫的簡易程式

macro 與 inline 的差異在於 
macro 是 pre-compile 會在程式編譯成機器語言前先編好，是一種文字替換的概念，可以接受多種型態，因此不需要定型態；
inline 的運作就像一般函式一樣，是 compiler 決定的，需要定型態

// macro example
#define SIZE 1024 // 定常數
#define SQUARE(x) ((x) * (x)) // 定函式

//inline example
inline int square(int x){
return x*x;
}

上述例子，使用 macro x 會被呼叫兩次，使用 inline 就只有一次，
但 macro 可以接受任意型態 double, int , float 都可以，但 inline 要定三個形態的 function

需注意的部分:
macro 因為是文字替換，所以若沒使用好運算子的優先順序，或是做太重複性的工作，便可能造成結果錯誤、效率不好等問題
inline 的使用要注意函式的長短，因為編譯器會考量有沒有合乎效益，來決定要不要將 function 展開為 inline，不然就只是一般 function

///////////////////////////////
Example

#define B(N) (N+N+N)
int GetValue=7;

inline int ADD(int n){
return n+n+n;
}


int main()
{
int result1,result2;

result1 = B(GetValue);
result2 = ADD(GetValue);
printf("B=%d\n",result1);
printf("C=%d\n",result2);
return 0;
}

result1 會呼叫GetValue三次 來做N+N+N

result2 則是呼叫一次GetValue,然後再把三個加起來  這是兩個編譯時候的差異
========================================================================

Volatile variable

揮發性變數，如在使用多執行序時或控制I/O獲取資料時特別注意
1. I/O, 假設有一程式片斷如下

       U8   *pPort;
       U8   i, j, k;
       
       pPort = (U8 *)0x800000;
    
       i = *pPort;      
       j = *pPort;      
       k = *pPort;     

    以上的i, j, k很有可能被compiler最佳化而導致產生
       i = j = k = *pPort;
    的code, 也就是說只從pPort讀取一次, 而產生 i = j = k 的結果, 但是原本的程式的目
    的是要從同一個I/O port讀取3次的值給不同的變數, i, j, k的值很可能不同(例如從此
    I/O port 讀取溫度), 因此i = j = k的結果不是我們所要的

    怎麼辦 => 用volatile, 將
       U8   *pPort;
    改為
       volatile U8   *pPort;

    告訴compiler, pPort變數具有揮發性的特性, 所以與它有關的程式碼請不要作最佳化動作. 因而   
       i = *pPort;      
       j = *pPort;      
       k = *pPort;      
    此三列程式所產生的code, 會真正地從pPort讀取三次, 從而產生正確的結果

2. Global variables in Multithread program 
=> 這是在撰寫multithread program時最容易被忽略的一部份
=> 此原因所造成的bug通常相當難解決(因為不穩定)


假設有以下程式片斷, thread 1 & thread 2共用一個global var: gData 
  thread 1:                                thread 2:                                                                                                                      
    ...                                      ....                                 
  int  gData;                              extern int gData;                    
                                                                                          
  while (1)                                int  i, j, k;                        
  {                                                                             
      ....                                 for (i = 0; i < 1000; i++)
       gData = rand();                      {                                    
      .....                                    /* A */
   }                                            j = gData;                       
                                                ....                             
       ....                                  }                                   

    在thread 2的for loop中, 聰明的compiler看到gData的值, 每次都重新從memory load到register, 
    實在沒效率, 因此會產生如下的code(注意,tmp也可以更進一步的用register取代):
       tmp = gData;
       for (i = 0; i < 1000; i++            
       {                                    
           /* A */
           j = tmp;                       
           ....                             
       }                                    
也就是gData只讀取一次, 這下子問題來了, 說明如下:
        .thread 2在執行for loop到j = gData的前一列(A)的時候(假設此時gData=tmp=5), 被切換到thread 1執行
        .在thread 1的while loop中透過gData = rand(), 對gData做了修改(假設改為1), 再切換回thread 2執行
    .繼續執行 j = gData, 產生j = 5的結果
    .但是正確的結果應該是 j = 1
    怎麼辦 => 也是用volatile,

    在thread 1中, 將
        int  gData;   
    改為
        volatile int  gData;   
    
    在thread 2中, 將
        extern int  gData;   
    改為
        extern volatile int  gData;

一個定義為volatile的變量是說這變量可能會被意想不到地改變，這樣，編譯器就不會去假設這個變量的值了。
精確地說就是，優化器在用到這個變量時必須每次都小心地重新讀取這個變量的值，而不是使用保存在暫存器裡的備份。

下面是volatile變量的幾個例子︰
∙並行設備的硬體暫存器 (如︰狀態暫存器) 
∙一個中斷服務次程序中會訪問到的非自動變數(Non-automatic variables)
∙多執行緒應用中被幾個任務(task)共享的變數

Q:
∙一個參數可以同時是const也是volatile嗎? 解釋為什麼。
∙一個指標可以是volatile 嗎? 解釋為什麼。
∙下面的函數有什麼錯誤︰
int square(volatile int *ptr)
{
   return *ptr * *ptr;
}

ANS:︰
∙是的。舉的例子是"只讀的狀態暫存器"。它是volatile因為它可能被意想不到地改變。它是const因為程式不應該試圖去修改它。
∙是的。儘管這並不很常見。舉的例子是當一個執行中的次程序修該一個指向一個buffer的指標時。
∙這段程式碼有點變態。這段程式碼的目的是用來返指標*ptr指向值的平方，但是，由於*ptr指向一個volatile型參數，編譯器將產生類似下面的程式碼︰
int square(volatile int *ptr)
{
   int a，b;
   a = *ptr;
   b = *ptr;
   return a * b;
}
由於*ptr的值可能被意想不到地該變，因此a和b可能是不同的。結果，這段程式碼可能返回不是你所期望的平方值！正確的程式碼如下︰
long square(volatile int *ptr)
{
   int a;
   a = *ptr;
   return a * a;
}

//////////////////////
Reference: 
http://freestyler.pixnet.net/blog/post/23872864-c-c%2B%2B%E4%B8%AD%E7%9A%84volatile%E4%BD%BF%E7%94%A8%E6%99%82%E6%A9%9F%3F
http://angledark0123.pixnet.net/blog/post/51919574

======================================================================

	Extern variable
在main.c中實際上並沒有宣告someVar，extern指出someVar是在其它位置被定義，編譯器會試圖在其它位置或文件中找出 someVar的定義，結果在some.c中找到，因而會顯示結果為1000，要注意的是，extern聲明someVar在其它位置被定義，如果您 在使用extern時同時指定其值，則視為在該位置定義變數，結果就引發重覆定義錯誤，例如：
#include <stdio.h>

int main(void) {
    extern double someVar = 100; // error, `someVar' has both `extern' and initializer     
    ...
    return 0;
}

您必須先聲明extern找到變數，再重新指定其值，這麼使用才是正確的：
#include <stdio.h>

int main(void) {
    extern double someVar;
    someVar = 100;
    ...
    return 0;
}

======================================================================

設有以下程式
Int a[5]={1,2,3,4,5};
Int *p = (int *)(&a+1);
Ask:the value of *(a+1),(*p-1)?

※ a位址代表起始元素，&a取出的位址雖然與a相同，但型態不同，如要運算則要考慮整個陣列長度
(a的型態 int *, &a的型態 int (*)[5])
*p = address(array) + sizeof(type)
*p = a的address+sizeof(int (*)[5]) PS:sizeof(int (*)[5]) = (4byte)*5 

p的位址為陣列最後一元素位址+sizeof(int)

ANS:
*(a+1)=2
*p-1=unknown位址的unknown值-1(每次執行會不一樣)

補充:
*(p-1)=5

======================================================================
判斷int溢位(不能用long幫忙)
//Type c=a+b; 註：程式師知道這段有可能溢位。
if(Max_Type-a<b){處理方案}//溢位了！ (例如Max_short=32,767)
else c=a+b;

PS:
需先定義Max_Type的大小(#define Max_Type xxxxx)
判斷剩下多少空間可以使用(Max_Type - a)，剩下的空間是否足夠給b使用
不夠(Max_Type - a < b)則代表會益位

======================================================================
當場寫出一個反轉字串的程式，輸入是一個char*
void swapchar(char* str){
	int i, j;
	char c;
	for(i=0,j=strlen(str)-1;i<j;i++,j--){
		c = str[i];
		str[i]=str[j];
		str[j]=c;
	}
}

======================================================================
如何判斷一個字串陣列的大小，且不能使用strlen
int gjstrlen(char* str){
	int i=0;
	for(i=0;*str!='\0';i++,str++);
	return i;
}

======================================================================
const int* p 和 int* const q 兩者之差別？

ANS:
Const int *p =>p是一個pointer指向一個常數int
Int * const q =>q是一個常數pointer指向一個int變數

For instance
	double a[]={0,1,2,3};

	double b[]={1,2,3,4};
	
	const double *ptr3;    // ptr is a pointer points to double, which is a constant
	//指到的內容不可由指標改變，可由陣列自行改變
	double *const ptr2 = a;    // ptr is a constant pointer points to double
	//指到的位址不可改變，需初始宣告時給予指定位址
	double const* ptr1;    // ptr is a pointer points to constant double
	//Same as first one
	const double *const ptr4 = a;    // ptr is a constant pointer points to double, which is a constant
	//指到的內容和位址都不可改變

reference:
Theory --> http://angledark0123.pixnet.net/blog/post/51919578
Example --> http://lalalah.pixnet.net/blog/post/31677924-%5B%E8%BD%89%5Dc%E7%9A%84%E9%97%9C%E9%8D%B5%E5%AD%97%E2%80%94%E2%80%94const%E7%9A%84%E7%90%86%E8%A7%A3%E5%92%8C%E7%94%A8%E6%B3%95
======================================================================
指標與陣列的差別？
char *str = "test";
char str[] = "test";
指標只會有一個變數儲存指標的頭，他並沒有被分配到記憶體空間，如果用上述的宣告方式test將會是個唯讀的空間不可被更改。也可以用malloc配置空間。
陣列會產生出實際的記憶體空間。是一個固定長度的連續實體空間。

======================================================================
#define SUM(a,b)  a+b
      若是 SUM(2,5)*10 的答案是什麼？
2+5*10=52
試寫出一個Macro求出兩數之最大值。
#define MAX(A,B) ( (A) >= (B) )? (A) :(B) )

======================================================================
寫出一個字串拷貝程式： void StrCpy(char* dst , char* src) ;
void StrCpy(char* d , char* s){

	for (; *d != '\0'; s++, d++)
	*s=*d;
}

======================================================================
void func(void){
          static int i = 0 ;
          i++ ;
          printf("%d" , i ) ;
        }
連續呼叫 func 10 次，印出的值為何？
1 2 3 4 5 6 7 8 9 10

Static 使用方式:

1. 使用在全域變數或全域函式 (Global variable & Global function)
讓該變數(或該函式)的可視範圍只侷限在該檔案內，其他的 .c檔看不到此變數(或函式)的存在。
既使其他檔案用extern宣告也看不到！
套句行話來說，他把Global的變數或函數變成了「internal linkage」，當Linker在找symbol時是會忽略它的。
(在C++中也相容這種用法，不過被視為比較不建議的舊的用法，C++比較建議使用unnamed namespace。)

使用時機：
當此全域變數(或全域函式)不想被其他檔案引用和修改時，或者不同檔案可以使用相同名字的全域變數(或全域函式)而不會產生命名衝突。

2. 使用在函式內的區域變數 (Local variable)
因為區域變數預設就是動態變數，而在區域變數前加上static修飾字則會將變數由動態(dynamic)變數轉為靜態(static)變數，
靜態變數的壽命(lifetime)與動態變數不同，靜態變數會一直存在，直到程式結束為止。

======================================================================
整數轉字串
char s[100];
sprintf(s, "%d", i);
給予10個任意整數，輸出其最小值、最大值、平均值。
void maxminavg(int *data){
	int maxd=data[0];
	int mind=data[0];
	int avg=data[0];
	for(int i=1;i<10;i++){
		if(maxd<data[i])maxd=data[i];
		if(mind>data[i])mind=data[i];
		avg=avg+data[i];
	}
	printf("max:%d,min:%d,avg:%f\n",maxd,mind,(float)avg/10);
}

======================================================================
交換兩數的值(不能使用變數幫忙)
void swapdata(int *d,int *s){
	*d=*d^*s;
	*s=*d^*s;
	*d=*d^*s;
}

======================================================================
用一行程式判斷是否為2的冪次方
x&(x-1)? 0:1

==============================
檢查1的數量

int  fun(int x)
        {
          int count = 0 ;

          while(x){
             count++ ;
             x = x & (x-1) ;
          }
          return count ;
        }
       若x=456;則return值為多少？
456 =>binary=111001000 => count=4

=====================================================
char str[100] = "Hello World";

sizeof(str) = ?;

srlen(str) = ?

char str1[100] = "Hello\0World";

strlen(str1) = ?

ANS:
故sizeof(str) = 100；
故strlen(str) = 10(不含'\0')

strlen(str1) = 5。
注意：strlen函數求得的字符串長度不包含'\0'。
      strlen函數求得的長度是從字符串開始到第一個'\0'的長度

=====================================================

char str[] = "Hello";

sizeof(str) = ?;

strlen(str) = ?;

ANS:
sizeof(str) = 6

strlen(str) = 5

===========================================
隨便寫一個sort int array的function

int len=sizeof(data) / sizeof(*data); //get length

void sortint(int *data,int len){
	
	for(int i=0;i<len;i++){
		for(int j=0;j<len-i-1;j++)
		{ //do swap
			if(data[j]<data[j+1]){
				data[j]=data[j]^data[j+1];
				data[j+1]=data[j]^data[j+1];
				data[j]=data[j]^data[j+1];
			}
		}
	}
}

===========================================
前置知識

※函數指標
int add(int a, int b) {
  return a+b;
}

int mult(int a, int b) {
  return a*b;
}

int main()
{
  int (*op)(int a, int b);
  op = add;
  printf("op(3,5)=%d\n", op(3,5));
  op = mult;
  printf("op(3,5)=%d\n", op(3,5));

  system("pause");
    return 0;
}

ANS:
op(3,5)=8
op(3,5)=15

===========================================
實現main
extern void func1(void);
extern void func2(void);
extern void func3(void);
extern void func4(void);
extern void func5(void);

void main(int n)
{
  if n==1 execute func1;
  if n==2 execute func2;
  if n==3 execute func3;
  if n==4 execute func4;
  if n==5 execute func5;
}

ANS:
void (*command[])(void) = {func1, func2, func3,func4,func5};  
  
void main(int n) {  
    command[n-1]();   
}  

PS:
*command為函數指標，
void (*command[])(void)為一個陣列指標，
去指每一個Function的位址，
使陣列的element對應到每個Function。

==========================================================
實現main
extern void func1(void);
extern void func2(void);
extern void func3(void);
extern void func4(void);
extern void func5(void);

void main(int n)
{
  if n==33 execute func1;
  if n==67 execute func2;
  if n==324 execute func3;
  if n==231 execute func4;
  if n==687 execute func5;
}

ANS:
static void (*command[])(void) = {0,func1, 0,func2, func3,0,0,func4,0,0,0,0,0,0,0,func5};  
  
void main(int n) {  
    command[n%16]();  
}

====================================================
何謂reentrant程式，設計reentrant需注意什麼？
可重入程式。
(可重入函式︰
不為連續的呼叫持有靜態數據。 
不返回指向靜態數據的指標；所有數據都由函式的呼叫者提供。 
使用本地數據，或者透過製作全域數據的本地拷貝來保護全域數據。
如果必須訪問全域變數，記住利用互斥信號量來保護全域變數。
絕不呼叫任何不可重入函式。)
不可重入:
static int tmp;
void func1(int* x, int* y) {
    tmp=*x; 
    *x=*y; 
    *y=tmp;
}
可重入:
void func2(int* x, int* y) {
    int tmp; 
    tmp=*x; 
    *x=*y; 
    *y=tmp;
}
===============================================

void *p0;

int *p1;

char *p2;

long *p3;

float *p4;

double *p5;

sizeof(p0) = ?;

sizeof(p1) = ?;

sizeof(p2) = ?;

sizeof(p3) = ?;

sizeof(p4) = ?;

sizeof(p5) = ?;

ANS:

因为任何類型的指針在內存中都占4個字節，所以sizeof(p0)、sizeof(p1)、sizeof(p2)、sizeof(p3)、sizeof(p4)、sizeof(p5)都等於4。

===============================================

char *str = "Hello";

sizeof(str) = ?;

strlen(str) = ?;

str在內存中占?個字節

ANS:
str是指針，則sizeof(str) = 4；
str指向的字符長度为5，則strlen(str) = 5；
字符串以'\0'結尾，故str在內存中實際存儲为"H、e、l、l、o、\0"，則str在內存中占6個字節。

===============================================

void test1()
{
　char str[10];
　char *str1 = "0123456789";
　strcpy( str, str1 );
}

ANS:
str1占11個字節（字符串以'\0'結尾），而str數組只有10個字節的內存空間。str數組不能存放下str1字符串，會造成數組越界。

===============================================

char s1[10] = "Hello";

char s2[20];

s2 = s1;

ANS:
因为s2是一個字符數組，不能用另一個字符數組以等號直接賦值，

應該使用strcmp賦值，即strcpy(s2,s1)。

===============================================

void Test(char str[10])

{

     printf("%d \n",sizeof(str));

}

int main()
{
  char a[10]={0};

  
     printf("%d \n",sizeof(a));

   Test(a);
  
  system("pause");
    return 0;
}

sizeof(str) = ?

ANS:
4
Call by reference的方式，因此str僅為一個指標

===============================================
數據宣告 (Data declarations)

用變數a給出下面的定義:
a)一個整型數 (An integer)
b)一個指向整數的指標 (A pointer to an integer) 
c)一個指向指標的指標，它指向的指標是指向一個整型數 (A pointer to a pointer to an integer)
d)一個有10個整數型的陣列 (An array of 10 integers) 
e)一個有10個指標的陣列，該指標是指向一個整數型的 (An array of 10 pointers to integers)
f)一個指向有10個整數型陣列的指標 (A pointer to an array of 10 integers)
g)一個指向函數的指標，該函數有一個整數型參數並返回一個整數 (A pointer to a function that takes an integer as an argument and returns an integer)
h)一個有10個指標的陣列，該指標指向一個函數，該函數有一個整數型參數並返回一個整數 (An array of ten pointers to functions that take an integer argument and return an integer)

ANS︰
a) int a; // An integer
b) int *a; // A pointer to an integer
c) int **a; // A pointer to a pointer to an integer
d) int a[10]; // An array of 10 integers
e) int *a[10]; // An array of 10 pointers to integers
f) int (*a)[10]; // A pointer to an array of 10 integers
g) int (*a)(int); // A pointer to a function a that takes an integer argument and returns an integer
h) int (*a[10])(int); // An array of 10 pointers to functions that take an integer argument and return an integer

=======================================
Q:
給定一個整型變量a，寫兩段程式碼，

第一個設置a的bit 3，
第二個清除a 的bit 3

在以上兩個操作中，要保持其它位不變。

ANS:
#define BIT3 (0x1 << 3)
static int a;
void set_bit3(void)
{
   a |= BIT3;
}
void clear_bit3(void)
{
   a &= ~BIT3;
}
======================================
宣告一個變數在a.c中的main上面並加上static，在b.c檔去extern它跟沒加static有甚麼不同?

Ans:???
======================================
Explain “#error”
#error : 在編譯時，輸出錯誤訊息，警告使用者某些錯誤，並且不會真的進行編譯，在巨集處理階段就會停止。
======================================
Explain “struct” and “union”
Struct中的記憶體空間是獨立的
Union則是內部變數共用記憶體空間(以最大的為主)
ex:
union u1
{
	char a[2];
	// a[0]就會等於b的lowbyte, a[1]就會等於b=highbyte
	short b;
};
======================================
Unsigned long v1=0x00001111;
Unsigned long v2=0x00001202;
Unsigned long v;
V=v1&(~v2);
V= v | v2;
Ask: the value of v?
v = 0x00001313;
======================================
Write a code 
Set the specific bit
Clear the specific bit
Inverse the specific bit(0->1;1->0)

void setbit (uint32_t x, uint32_t bit){
    x |= (1 << bit);
}
void clearbit(uint32_t x, uint32_t bit){
    x &= ~(1 << bit);
}
void inversebit(uint32_t x, uint32_t bit){
x ^= (1 << bit);
}
======================================
Explain lvalue and rvalue : 
Lvalue : 就是一個運算式後還保留其狀態的一個物件 就是 Lvalue; 也就是說 所有的變數包含 nonmodifiable, const 的變數都是 Lvalue.  這邊一個重點是 const 的變數也是 Lvalue.
Rvalue : 就是一個運算式過後其狀態就不會被保留了, 也就是一個暫存的數值.
Lvalue 在運算子的左右兩邊都是被允許的，但 Rvalue 是不能出現在左邊的。

=====================================
write a code that the input is a multiple of 3 or not without using division or mod : 
int isMultipleOf3(int n){

	int odd_count = 0;
	int even_count = 0;

	if(n == 0)
		return 1;
	else if(n == 1)
		return 0;

	while(n){
		if(n & 0x1)
			odd_count ++;
		n >>= 1;

		if(n & 0x1)
			even_count ++;
		n >>= 1;
	}
	
	return isMultipleOf3(abs(odd_count - even_count));
}


int main(void)
{
	if(isMultipleOf3(81))
		printf("the number is multiple of 3!\n");
	else
		printf("the number is not multiple of 3 ! \n");

	return 0;
}

or

int multipleof3(int n){
	if(n==0) return 0;
	while(n>0)
		n=n-3;;
	while(n<0)
		n=n+3;

	return n==0 ? 1:0;
}
==================================================
